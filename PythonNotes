Scope
	https://hyperskill.org/learn/step/6322
	§ LEGB rule
		A variable resolution in Python follows the LEGB rule. That means that the interpreter looks for a name in the following order:
		1. Local.
		2. Enclosing. Names of the local scope in all enclosing functions from inner to outer.
		3. Globals.
		4. Built-in.
	§ About "global" and "nonlocal"
		global:
			You can't change the value of a global variable inside the function wiithout using the global keywords:

			"""
			x = 1
			def print_global():
			    print(x)

			print_global()  # 1

			def modify_global():
			    print(x)
			    x = x + 1

			modify_global()  # UnboundLocalError
			"""

			An error is raised because we are trying to assign to a local variable the expreesion that contains x and the interpreter can't find this variable in a local scope.
			备注: Python是可以初始化变量的时候直接赋值的, 例如相继执行 x = 1, a = x + 1, 这是不会报错的. 上例函数 modify_global() 中, x是全局变量 (global variable), 因此可以使用. 如果语句 x = x + 1 改为 a = x + 1 也不会出错, 因为解释器默认为 a 是一个局部变量 (local variable). 我理解原语句报错的原因是, print(x) 引用了 x, 遵循LEGB法则, x 只能是全局变量了 (在先执行的语句这里将 x 定性). 然后解释器在执行 x = x + 1 的时候, 相当于对|全局变量|进行修改, 错误. 解决方案如下. 给我启发的代码有下面几个:

			"""
			x = 1
			def func():
				print(x)
			func()			# 不会报错, 输出1

			x = 1
			def func():
				x = 2
			func()			# 不会报错
			print(x)		# 输出1

			x = 1
			def func():
				x = 2
				print(x)
			func()			# 不会报错, 输出2

			x = 1
			def func():
				print(x)	# 此时使用的全局变量 x = 1, “被引用”
				x = 2		# 函数内部想要修改全局变量, 不可行, 所以报错信息是“局部变量 x 在赋值前已经被引用”
			func()			# 报错, local variable 'x' referenced before assignment
			"""


			# 解决方案
			"""
			x = 1
			def global_func():
			    global x
			    print(x)
			    x = x + 1

			global_func()  # 1
			global_func()  # 2
			global_func()  # 3
			"""

		nonlocal:
			nonlocal keyword lets us assign to variables in the outer (but not global) scope:

			"""
			def func():
			    x = 1
			    def inner():
			        x = 2
			        print("inner:", x)
			    inner()
			    print("outer:", x)

			def nonlocal_func():
			    x = 1
			    def inner():
			        nonlocal x
			        x = 2
			        print("inner:", x)
			    inner()
			    print("outer:", x)

			func()  # inner: 2
			        # outer: 1

			nonlocal_func()  # inner: 2
			                 # outer: 2
			"""

			备注: 我将其理解为, 在内部的函数使用 nonlocal 对一个变量进行声明后, 外部函数 (还不是最外层函数) 就得接受内部函数修改之后的改变量了.
		Though global and nonlocal are present in the language, they are not often used in practice, because these keywords make programs less predictable and harder to understand.
		备注: 这两个关键字威力强大, 但是最好还是不要轻易使用, 容易混淆逻辑. 解决的办法是, 把想要修改的变量传入参数并返回.
	§ Why do we use global?
		Well, as was already mentioned above, global scope is one of the easiest ways to retain information between function calls: while local variables disappear the moment the function returns, global variables remain and help functions to transfer the necessary data between each other. Similarly, global variables can enable the communication between more complex processes, such as threads in multithreaded applications.

Introducton to OOP
	https://hyperskill.org/learn/step/3614
	§ Fundamentals
		Object-oriented programming (OOP) is a programming paradigm based on the concept of objects that interact with each other to perform thee program functions.
	§ Basic principles of OOP
		# HUAWEI 面试有考到对四个特点的理解
		They are encapsulation, abstraction, inheritance and polymorphism.
	§ Objects
		They key notion of the OOP is an object.
	§ Classes
		Often, many individual objects have similar characteristics. We can say these objects belong to the same type or class.
		A class is another important notion of OOP. A class describes a common structure of similar objects: their fields and methods. It may be considered a template or a blurprint for similar objects. An object is an individual instance of a class.
		Any class should be considered a black box in accordance with the principle of encapsulation mentioned above.
	§ Conclusion about objects and classes
		1. an object-oriented program consist of a set of interacting objects;
		2. according to the principle of encapsulation, the internal implementation of the object is not accessible to the user;
		3. an object may have characteristics: fields and methods;
		4. an object is an instance of a class (type);
		5. a class is a more abstract concept than an indicidual object; it may be considered a template or blueprint that describes the common structure of a set of similar objects.

		Example:
		What can be characterized by a state and behavor?	Object
		The state of an object is stored in its ___?   fields (or attributes)

Theory: String formatting
	Example:
		print('%.3f' % (11 / 3))
	§1. The str. format() method
		positional argument
			Example:
				print('{0} in the {1} by Frank Sinatra'.format('Strangers', 'Night'))
		keyword argument:
			Example:
				print('The {film} at {theatre} was {adjective}!'.format(film='Lord of the Rings', adjective='incredible', theatre='BFI IMAX'))
		mixed argument:
			Example:
				print('The {0} was {adjective}!'.format('Lord of the Rings', adjective='incredible'))
			Remember that keyword arguments are always written after positional, or non-keyword, arguments.
	§2. Formatted string literals
		f-strings.
		Examples:
			name = 'Elizabeth II'
			title = 'Queen of the United Kingdom and the other Commonwealth realms'
			reign = 'the longest-lived and longest-reigning British monarch'
			f'{name}, the {title}, is {reign}.'

			a = 1
			b = 2
			print(f'{a} / {b} is {a / b: .3f}')	# 0.500

Theory: Magic methods
	https://hyperskill.org/learn/step/7139
	§1. What are "magic" methods?
		They are recognizable in the code of the class definitions because they are enclosed in double underscores: __init__ , for example, is one of those "magic" methods in Python. Since they are characterized by double underscores they are often called dunders.
		Dunders are not meant to be invoked directly by you or the user of your class, it happens internally on a certain action. For example, we do not explicitly call the __init__ method when we create a new object of the class, but instead, this method is invoked internally. All we need to do is to define the method inside the class in a way that makes sense for our project.
	§2. __new__ vs __init__
		So far we've been calling __init__ the constructor of the class, but in reality, it is its initializer. New objects of the class are in fact created by the __new__ method that in its turn calls the __init__ method.

		The first argument of the __new__ method is cls. It represents the class itself, similar to how self represents an instance of the class. This also makes __new__ a different kind of method since it doesn't require an instance of the class. This makes sense since it is supposed to create those instances. The method returns a new instance of the class which is then passed to the __init__ method.

		Usually, there is no need to define a special __new__ method, but it can be useful if we want to return instances of other classes or restrict the number of objects in our class.

		Imagine, for example, that we want to create a class Sun and make sure that we create only one object of this class. We would need to define a class variable that would track the number of instances in the class and forbid the creation of new ones if the limit has been reached.

		class Sun:
		    n = 0  # number of instances of this class

		    def __new__(cls):
		        if cls.n == 0: 
		            cls.n += 1
		            return object.__new__(cls)  # create new object of the class
		        return None

		The code above may be a bit unexpected so let's analyze it. We first check that the class variable n has a value of zero. If it does, it means that no instances of the class have been created and we can do that. We then update the class variable and call __new__ method of object class which allows us to create a new instance.

		If we now try to create 2 objects of this class we will not succeed:

		sun1 = Sun()
		sun2 = Sun()

		print(sun1)	# <__main__.Sun object at 0x1106884a8>
		print(sun2)	# None
	§3. __str__ vs __repr__
		Printing out information and data is very important when programming. You can print the results of calculations for yourself or the user of your program, find the mistakes in the code or print out messages.

		For example, let's consider the class Transaction:

		class Transaction:
		    def __init__(self, number, funds, status="active"):
		        self.number = number
		        self.funds = funds
		        self.status = status

		If we create a transaction and try to print it out we will not get what we want:

		payment = Transaction("000001", 9999.999)
		print(payment)
		# example of the output: <__main__.Transaction object at 0x11068f5f8>

		Instead of the values that we would like to see, we get information about the object itself. This can be altered if we deal with __str__ or __repr__ methods.

		As the names suggest, __str__ defines the behavior of the str() function and __repr__ defines the repr() function. A general rule with the __str__ and __repr__ methods is that the output of the __str__ should be highly readable and the output of the __repr__ should be unambiguous. In other words, __str__ creates a representation for users and __repr__ creates a representation for developers and debuggers. If possible, __repr__ should return Python code that could be used to create this object or, at least, a comprehensive description.

		|||Both __repr__ and __str__ should return a string object!|||

		A good rule is to always define the __repr__ method first since it is the method used by developers in debugging. It is also a fallback method for __str__which means that if the __str__ method isn't defined, in the situations where it's needed, the __repr__ will be called instead. This is, for example, the case with print().

		In our example here, let's create the __repr__ method that would create an unambiguous representation of the transaction and all its attributes.

		class Transaction:
			    def __init__(self, number, funds, status="active"):
			        self.number = number
			        self.funds = funds
			        self.status = status

			    def __repr__(self):
			        return "Transaction({}, {})".format(self.number, self.funds)

		Now if we try to print any transaction we will get a standard readable string:

		payment = Transaction("000001", 9999.999)
		print(payment)
		# Transaction(000001, 9999.999)

		You can see that we've called print and got the representation from __repr__. Now let's add __str__ and see if things change.

		class Transaction:
		    def __init__(self, number, funds, status="active"):
		        self.number = number
		        self.funds = funds
		        self.status = status

		    def __repr__(self):
		        return "Transaction({}, {})".format(self.number, self.funds)

		    def __str__(self):
		        return "Transaction {} for {} ({})".format(self.number, self.funds, self.status)


		payment = Transaction("000001", 9999.999)
		print(payment)
		# Transaction 000001 for 9999.999 (active)
		print(repr(payment))
		# Transaction(000001, 9999.999)

		Now that we have __str__, when we call print, we get the representation defined there. To see the "official" representation we need to directly call the repr function.
	§4. Summary
		Magic methods are said to add "magic" to your classes and that is somewhat true. Dunders really make working with classes much easier and far more efficient.

		In this topic, we've covered only a couple of these magic methods. We highly encourage you to look them up (for example, in "A Guide to Python's Magic Methods" by Rafe Kettler) and try them out in your projects. As for the magic methods for arithmetics and comparisons, we'll look into them in another topic!

**********20210118**********
Theory: Program execution
	From the programmer's point of view: source code is just a set of statements. But that's not exactly it!
	There are interpreted or compiled languages.
	**********Python is an interpreted language.**********
	§1. The interpreter
		The software which "reads" your program and executes what is written in it line by line is unexpectedly called Interpreter and that is a part of the standard Python installation package.
		Another inherent part of it is the standard library with all built0in modules, functions, data, etc.
		An iinterpreter can be written in basically any programming language. The default interpreter for Python is written in C and is called CPython. Some other Python interpreters are:
			PyPy is written in a restricted subset of Python called RPython (Restricted Python).
			JPython translates Python code into Java-compatible byte code, which is later executed by JVM.
			IronPython is an implemtntaion of Python for .NET framework.
		In fact, what is really happening during interpretation consists of 3 smaller ones:
			Compilation -> Bytecode -> Virtual Machine
		The compiler turns your set of source code into so-called byte code. Byte code is lower level (thus more detailed), platform-independent, and more efficient version of source code, but it's not binary machine code like instructions for an Inter or AMD chip. Byte code is a Python-specific represtation of source code. That's why some Python programs are executed not as fast as the analogs in C++ or C -- traditional compiled languages.
	§2. Python Virtual Machine
		After compilation, the byte code is given into the PVM (Python Virtual Machine). In fact, it is nothing more than a big piece of code, that iterates through byte code instructions received from a compiler and executes them one by one, thus performing the desirable operations specified by the programmer. It is an internal part of the Python system and you don't need to install it as it's not a separate program. In fact, the thing which really executes your code is PVM, so we can say it is the last step of executing any Python program.
	§3. Conclusion
		Executing a Python program implies both steps: compilation and interpretation.

Theory: Any and all
	§1. Function any()
		The result of the any() function call is the boolean value: it returns True if an element or a group of elements in an iterable object are evaluated True.
		In fact, all numbers other than 0 will be regarded as True, even the negative ones. That part stems from how the bool() function works.
		So what does the any() function do? First, it takes a list as an argument, then evaluates all the elements of this list to find at least one True, if so, it returns True, otherwise, the result is False.
		Example:
			jam_results = []
			print(any(jam_results))  # False. 
		The list doesn't contain any elements, and since no True value is to be found the any() function returns False.
	§2. Function all()
		The all() function works pretty much like any(). The difference is that all() function checks if all the elements of an iterable object are True and returns True if they are. Otherwise, you get False.
		Example:
		jam_results = []
		print(all(jam_results))  # True
		The list doesn't contain any elements, but the all() function will return True because it searches for any False values. No False values result in True. Be careful with this scenario.
	§3. Non-boolean values
		**********
		Be cautious, the result of calling the all() function on an empty sequence differs from converting an empty sequence to a boolean value. The result of all(list()) is True, the result of bool(list()) is False.
		**********
	§4. Conditions
		Let's choose a candy box for Valentine's Day. Each box contains several types of sweets. But you are interested in the even amount of candies of each type because, obviously, you will share them with your valentine.
		Example:
			box = [10, 20, 33]
			if any([candy % 2 for candy in box]):
			    print("It is not a proper gift.")
			else:
			    print("Perfect!")
		Short and sweet.

Thoery: Search in a string
	§1. Membership testinig
		"pattern in string"
	§2. Boolean search in a string
		startswith() and endswith()
		Example:
			email = "email_address@something.com"
			print(email.startswith("www."))          # False
			print(email.endswith("@something.com"))  # True

		string.startswith(pattern, start, end)
		Example:
			email = "my_email@something.com"
			print(email.startswith("email", 2))  # False
			print(email.startswith("email", 3))  # True

			email = "my_email@something.com"
			print(email.endswith("@", 5, 8))  # False
			print(email.endswith("@", 5, 9))  # True
	§3. Element position
		find() and index()
		Example:
			best = "friend"
			print(best.find("i"))   # 2
			print(best.index("i"))  # 2

			print(best.find("u"))   # -1
			print(best.index("u"))  # ValueError

			print(best.find("end"))  # 3

			magic = "abracadabra"
			print(magic.find("ra"))  # 2

		string.find(pattern, start, end).
		Example:
			print(magic.find("ra", 5))      # 9
			print(magic.find("ra", 5, 10))  # -1

		Alternatively, we can use methods rfind() and rindex() to search backward from the end of the string.
		Example:
			print(magic.rfind("ra"))  # 9
			print(magic.rindex("a"))  # 10
	§4. Element number
		count()
		Example:
			magic = "abracadabra"
			print(magic.count("abra"))  # 2
			print(magic.count("a"))     # 5
**********20210122**********
Theory: Random module
	Python document about random: https://docs.python.org/3/library/random.html
	Random is pseudo-random.
	§1. Random method: first steps
		import random
		random.random() - it will provide us with a pseudo-random number from 0 to 1.
		random.seed() - you can set your own number or omit the optional argument x and censequently current system time would be used as default.
		The seed controls the behavior of pseudo-random in Python and can be used with any other function of random module.
	§2. Random basic functions
		random.uniform(a, b)
			returns a pseudo-random float number in the range between a and b.
		random.randint(a, b)
			return a pseudo-random integer number in the range between a and b.
		random.choice(seq)
			returns pseudo-random element from non-empty sequences.
		random.randrange(a, b, c)
			returns a pseudo-random number from a range between a and b with a step c. Just like the range() function, the start and step arguments may be omitted with the default values 0 and 1 respectively.
		randome.shuffle(seq, [random])
			shuffles a sequence. Attention: it doesn't work with immutable datatypes!
		random.sample(population, k)
			returns a pseudo-randoms k length list from a population sequence. This function is used for random samplling without replacement.
		and other narrow-specialized function:
		ramdom.gammavariate(alpha, beta)
			is used for gamma distribution
		ramdom.gauss(mu, sigma)
			returns Gaussian distribution
		Attention: The pseudo-random generators of the random module should NOT be used for security purposes. If you are intending to work with passwords, security tokens and other sensitive data, check out the secrets module. It's considered more reliable since it generates secure random numbers.
**********20210123**********
Theory: Files
	§1. What is a file
		Computers need to store a tremendous amount of data. On most operating systems, this data is stored in files.
		A user or a program can open, read, modify, save, and close files.
	§2. Contents and icons
	§3. Metadata (元数据)
		Metadata is the additional information about the file stored in computer memory. Let's take a look at some examples of metadata that file can have.
			Name
			Extention
			Format, or type
			Size
	§4. Attributes
		A special kind of metadata is file attributes. Each attribute can be either set (toggle on) or cleared (toggle off). For example:
			Hidden (H)
			System (S)
			Read-only (R)
	§5. Directories
		
Theory: Introduction to databases
	§1. Database
		A database is a collection of data that is specifically organized for rapid search and retrieval processed by a computer.
		Usually, the information in databases is compressed and stored as binaries rather than plain text.
		Unlike us, computers can easily understand the binary format of data, but what allows them to read and write it correctly? It is a program called Database Management System that controls the data in a database.
	§2. Database Management System
		Database Management System (DBMS) is a type pf software that allows user to define, create, and control data in database.
		Although it sounds like all databases have different syntax, most of them actually implement common standards. Almost all relational databases use the SQL standard, so you can apply the same commands in different DBMSs.
	§3. Access to data
		Databases provide schemas and metadata that allow fow a quick search of the needed data.
	§4. Data consistency
		One of the best features of databases is their ability to keep and restore the data correctly. It doesn't mean that the DBMS knows how to be correct, but once you define the correctness with the configuration or schema, you can be sure that nothing will break these rules. DBMS can provide you with formats you can use for your data. You can also set up all the tests and constraints that you want to have.
	§5. Conclusion
		With databases you can:
			Store, retrieve and update data;
			Get metadata and data dictionaries;
			Access database remotely;
			Restrict accesses to data;
			Make concurrent updates;
			Recover to some point in time;
			Check the rules for data consistency automatically.

Theory: What is SQL
	SQL (Structured Query Language) is a domain-specific programming language designed to handle data in tables.
	§1. Calculating statistics
		SQL is the standard data manipulation language used by data-driven companies around the world.
	§2. S is for Structured
		SQL is a language used to extract and update data structured as tables. This kind of data appears in various application areas such as an online store that utilizes a special software system to hold and access tables, known as a Relational Database Management System (RDBMS).
	§3. Q is for Query
		SQL is a pragramming language whth a large set of data processing features. It is declarative, meaning a statement written in SQL is a query that tells the system what should be done or evaluated but doesn't specify how.
		To help illustrate this, let's focus on a simple piece of functionality: extracting data from a table. If we have a table named Customers, a query to extract all rows and columns from it would be written in the following way:
		SELECT * FROM Customers;
		It's standard practice to end each SQL statement with a semicolon, known as a statement terminator.
		Keywords such as SELECT are not case sensitive in the SQL language. They can be in any letter case but are often written in all caps to make them more visible.
	§4. L is for Language
		You can read the simple query in the above example as "select everything from customers." SQL was designed to be as similar as possible to a natural language. Its declarative nature helps to hide the operation's complexities, enabling the user to define what is required in a relatively straightforward way. The system then analyses the query, chooses the control flow, and executes it.
	§5. Conclusion
		SQL is a domain-specific, declarative language used when working with structured data.
